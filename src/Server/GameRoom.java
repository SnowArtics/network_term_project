import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;

public class GameRoom {

    private int id; // 룸 ID
    private List<ClientInfo> userList = new ArrayList<ClientInfo>();
    private List<PrintWriter> printWriter = new ArrayList<PrintWriter>();
    private ClientInfo roomOwner; // 방장
    private ClientInfo recentClient;//가장 최근에 들어온 user
    private String roomName; // 방 이름
    private int i=0;

    public GameRoom(int roomId) { // 아무도 없는 방을 생성할 때
        this.id = roomId;
        userList = new ArrayList<ClientInfo>();
    }

    public GameRoom(ClientInfo user) { // 유저가 방을 만들때
        user.enterRoom(this);
        userList.add(user); // 유저를 추가시킨 후
        this.roomOwner = user; // 방장을 유저로 만든다.
        printWriter.add(userList.get(i).getThisWriter());//printWriter에 차례대로 추가해줌
        i++;
    }

    public GameRoom(List<ClientInfo> users) { // 유저 리스트가 방을 생성할
        this.userList = users; // 유저리스트 복사

        // 룸 입장
        for(ClientInfo user : users){
            user.enterRoom(this);
        }

        this.roomOwner = userList.get(0); // 첫번째 유저를 방장으로 설정
    }
    
    public void run() {
    	ChatServerProcessPartyThread thread1 = new ChatServerProcessPartyThread(roomOwner.getSocket(), printWriter, userList);
    	ChatServerProcessPartyThread thread2 = new ChatServerProcessPartyThread(recentClient.getSocket(), printWriter, userList);
    	thread1.start();
    	thread2.start();
    }

    public void enterUser(ClientInfo user) {
        user.enterRoom(this);
        recentClient = user;
        userList.add(user);
        printWriter.add(user.getThisWriter());
    }

    public void enterUser(List<ClientInfo> users) {
        for(ClientInfo gameUser : users){
            gameUser.enterRoom(this);
        }
        userList.addAll(users);
    }

    /**
     * 해당 유저를 방에서 내보냄
     * @param user 내보낼 유저
     */
    public void exitUser(ClientInfo user) {
        user.exitRoom(this);
        userList.remove(user); // 해당 유저를 방에서 내보냄

        if (userList.size() < 1) { // 모든 인원이 다 방을 나갔다면
            RoomManager.removeRoom(this); // 이 방을 제거한다.
            return;
        }

        if (userList.size() < 2) { // 방에 남은 인원이 1명 이하라면
            this.roomOwner = userList.get(0); // 리스트의 첫번째 유저가 방장이 된다.
            return;
        }
    }

    /**
     * 해당 룸의 유저를 다 퇴장시키고 삭제함
     */
    public void close() {
        for (ClientInfo user : userList) {
            user.exitRoom(this);
        }
        this.userList.clear();
        this.userList = null;
    }

    // 게임 로직

    /**
     * 해당 byte 배열을 방의 모든 유저에게 전송
     * @param data 보낼 data
     */
//   public void broadcast(byte[] data) {
//        for (ClientInfo user : userList) { // 방에 속한 유저의 수만큼 반복
            // 각 유저에게 데이터를 전송하는 메서드 호출~
            // ex) user.SendData(data);

//         try {
//            user.sock.getOutputStream().write(data); // 이런식으로 바이트배열을 보낸다.
//         } catch (IOException e) {
//            // TODO Auto-generated catch block
//            e.printStackTrace();
//         }
//        }
//    }
    
			/*
			 * private void broadcast(String data) { synchronized (userList) {
			 * for(ClientInfo writer : userList) { writer.getThisWriter().println(data);
			 * writer.getThisWriter().flush(); } } }
			 * 
			 * private void initBroadcast(String nickname) {//inin Broadcast는 GUI의 플레이어 리스트에
			 * 초기에 사람들을 추가시키기 위한 메소드다 synchronized (userList) { for(ClientInfo writer :
			 * userList) {//모든 printwirter에 있는 리스트에 브로드캐스팅한다.
			 * if(recentClient.equals(writer)) {//새롭게 들어온 사람한테는 현재 접속해 있는 모든 사람의 정보를 보낸다
			 * for(int i=0;i<userList.size();i++) {//클라이언트 정보에 있는 모든사람들을 보낸다.
			 * writer.getThisWriter().println("nickname:"+userList.get(i).getNickName());//
			 * 클라이언트 정보에 있는 사람들의 이름을 보낸다. writer.getThisWriter().flush(); } }else {//새로 들어온
			 * 사람이 아닌경우
			 * writer.getThisWriter().println("nickname:"+userList.get(userList.size()-1).
			 * getNickName());//그냥 새롭게 들어온사람만 추가해 준다. writer.getThisWriter().flush(); } } }
			 * }
			 */

    public void setOwner(ClientInfo gameUser) {
        this.roomOwner = gameUser; // 특정 사용자를 방장으로 변경한다.
    }

    public void setRoomName(String name) { // 방 이름을 설정
        this.roomName = name;
    }

    public ClientInfo getUserByNickName(String nickName) { // 닉네임을 통해서 방에 속한 유저를 리턴함

        for (ClientInfo user : userList) {
            if (user.getNickName().equals(nickName)) {
                return user; // 유저를 찾았다면
            }
        }
        return null; // 찾는 유저가 없다면
    }

    public ClientInfo getUser(ClientInfo gameUser) { // GameUser 객체로 get

        int idx = userList.indexOf(gameUser);

        // 유저가 존재한다면(gameUser의 equals로 비교)
        if(idx > 0){
            return userList.get(idx);
        }
        else{
            // 유저가 없다면
            return null;
        }
    }

    public String getRoomName() { // 방 이름을 가져옴
        return roomName;
    }

    public int getUserSize() { // 유저의 수를 리턴
        return userList.size();
    }

    public ClientInfo getOwner() { // 방장을 리턴
        return roomOwner;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public List getUserList() {
        return userList;
    }

    public void setUserList(List userList) {
        this.userList = userList;
    }

    public ClientInfo getRoomOwner() {
        return roomOwner;
    }

    public void setRoomOwner(ClientInfo roomOwner) {
        this.roomOwner = roomOwner;
    }
    
    public List getWriterList() {
    	return printWriter;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        GameRoom gameRoom = (GameRoom) o;

        return id == gameRoom.id;
    }

    @Override
    public int hashCode() {
        return id;
    }
}